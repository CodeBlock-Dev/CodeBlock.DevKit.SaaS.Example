@using HeyItIsMe.Application.Dtos.Questions
@using HeyItIsMe.AdminPanel.Helpers

<EditForm Model="Input" OnValidSubmit="HandleCreateQuestion">
    <DataAnnotationsValidator />

    <div class="form-group p-2">
        <label class="f-sm text-secondary">
            @SharedLocalizer[SharedResource.Question_Order]:
        </label>
        <InputNumber @bind-Value="Input.Order" class="form-control f-sm" />
        <ValidationMessage For="() => Input.Order" class="text-danger f-sm" />
    </div>

    <div class="form-group p-2">
        <label class="f-sm text-secondary">
            @SharedLocalizer[SharedResource.Question_Content]:
        </label>
        <InputTextArea @bind-Value="Input.Content" class="form-control f-sm" rows="3"></InputTextArea>
        <ValidationMessage For="() => Input.Content" class="text-danger f-sm"></ValidationMessage>
    </div>


    <div class="form-group p-2">
        <label class="f-sm text-secondary">
            @SharedLocalizer[SharedResource.Question_Description]:
        </label>
        <InputTextArea @bind-Value="Input.Description" class="form-control f-sm" rows="3"></InputTextArea>
        <ValidationMessage For="() => Input.Description" class="text-danger f-sm"></ValidationMessage>
    </div>

    <div class="form-group p-2">
        <button type="submit" class="btn f-sm btn-success me-2">
            @CoreLocalizer[CoreResource.Create]
        </button>
    </div>
</EditForm>

@code {
    private CreateQuestionDto Input = new();

    [CascadingParameter]
    protected BlazoredModalInstance ModalInstance { get; set; }

    protected virtual async Task HandleCreateQuestion()
    {
        var result = await QuestionService.CreateQuestion(Input);
        result.ShowToast(ToastService).PublishMessage(MessageService, Constants.QUESTION_CREATED).CloseModal(ModalInstance);
    }
}