@using CodeBlock.DevKit.Clients.WebApp.Helpers
@using CodeBlock.DevKit.Contracts.Domain
@using CodeBlock.DevKit.Contracts.Services
@using CodeBlock.DevKit.Licensing.Resources
@using CodeBlock.DevKit.Subscription.Resources
@inject IStringLocalizer<SubscriptionResource> SubscriptionLocalizer
@inject ISettingAccessorService SettingAccessorService
@inject IStringLocalizer<LicensingResource> LicensingLocalizer

@if (IsLoading)
{
    <ComponentLoading />
}
else
{
    if (!SubscriptionsModel.Any())
    {
        <div class="no-subscription-section">
            <div class="no-subscription-content">
                <i class="bi bi-inbox me-3"></i>
                <div class="no-subscription-text">
                    <span class="no-subscription-message">@WebAppClientLocalizer[WebAppClientResource.No_Active_Subscriptions]</span>
                    <a href="/plans/order" class="browse-plans-link">@WebAppClientLocalizer[WebAppClientResource.Browse_Plans]</a>
                </div>
            </div>
        </div>
    }
    else
    {
        foreach (var item in SubscriptionsModel)
        {
            <div class="subscription-item">
                <div class="row g-0">
                    <div class="col-md-7">
                        <div class="subscription-info">
                            <div class="d-flex align-items-center mb-2">
                                <h5 class="subscription-name mb-0">@item.Subscription.PlanDisplayName</h5>
                                <span class=" @item.Subscription.IsActive.GetBadgeClass() ms-3">@(item.Subscription.IsActive ? SubscriptionLocalizer[SubscriptionResource.SubscriptionState_Active] : SubscriptionLocalizer[SubscriptionResource.SubscriptionState_Inactive])</span>
                            </div>
                            <p class="subscription-description">@item.Subscription.PlanDescription</p>
                            <div class="subscription-details">
                                <div class="row">
                                    <div class="col-6">
                                        <div class="detail-item subscription-detail-item">
                                            <span class="detail-label">@WebAppClientLocalizer[WebAppClientResource.Auto_Renewal]</span>
                                            <span class="detail-value @(item.Subscription.AutoRenewalEnabled ? "text-success" : "text-muted")">@(item.Subscription.AutoRenewalEnabled ? CoreLocalizer[CoreResource.Enabled] : CoreLocalizer[CoreResource.Disabled])</span>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="detail-item subscription-detail-item">
                                            <span class="detail-label">@WebAppClientLocalizer[WebAppClientResource.Billing_Cycle]</span>
                                            <span class="detail-value">@item.Subscription.BillingCycle.GetEnumDisplayName()</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <div class="detail-item subscription-detail-item">
                                            <span class="detail-label">@WebAppClientLocalizer[WebAppClientResource.Next_Billing]</span>
                                            <span class="detail-value">@(item.Subscription.EndTimeIsUnlimited ? SubscriptionLocalizer[SubscriptionResource.SubscriptionEndTime_Unlimited] : item.Subscription.EndTime.ShortDate)</span>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="detail-item subscription-detail-item">
                                            <span class="detail-label">@WebAppClientLocalizer[WebAppClientResource.Renewal]</span>
                                            @if (item.Subscription.BillingCycle != BillingCycle.OneTime)
                                            {
                                                <span class="detail-value">@SettingAccessorService.Settings.Payment.Currency.Symbol @item.Subscription.RenewalPrice.ToThousandSeparated()</span>
                                            }
                                            else
                                            {
                                                <span class="detail-value"> - </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="subscription-actions">
                                <a href="/subscription/details/@item.Subscription.Id" class="subscription-details-link">@CoreLocalizer[CoreResource.Details]</a>
                                <a href="/plans/upgrade/@item.Subscription.PlanCategorySystemName/@item.Subscription.PlanId/@item.Subscription.BotId" class="upgrade-link">@CoreLocalizer[CoreResource.Upgrade]</a>
                                @if (item.Subscription.RenewalIsAllowed)
                                {
                                    <a href="/payment/renewal/subscription/@item.Subscription.Id" class="renew-link">@CoreLocalizer[CoreResource.Renew]</a>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-md-5">
                        <div class="subscription-features">
                            <div class="feature-header">
                                <h6 class="license-title">
                                    <i class="bi bi-shield-check me-2"></i>
                                    @WebAppClientLocalizer[WebAppClientResource.License_Overview]
                                </h6>
                            </div>
                            <div class="license-alert">
                                @* @DevKit.Licensing.UI.Helpers.HtmlHelper.GetColoredExpirationStateName(item.License.ExpireDateTime, item.License.ExpirationWarningThresholdDays, LicensingLocalizer) *@
                            </div>
                            <div class="feature-details">
                                <div class="applications-info">
                                    <div class="applications-display">
                                        <i class="bi bi-graph-up me-2"></i>
                                        <span class="applications-amount">@item.License.UsagesCount</span>
                                        <span class="applications-label">
                                            <a class="usage-count-link" href="/license/details/">@WebAppClientLocalizer[WebAppClientResource.Usages]</a>
                                        </span>
                                    </div>
                                </div>

                                <div class="license-actions mt-2">
                                    <a href="/license/details/@item.License.Id" class="license-details-link">@WebAppClientLocalizer[WebAppClientResource.License_Details]</a>
                                    <a href="/license/details/@item.License.Id" class="how-to-use-link">@WebAppClientLocalizer[WebAppClientResource.License_How_To_Use]</a>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        }
    }
}

@code {
    protected IEnumerable<SubscriptionModel> SubscriptionsModel = new List<SubscriptionModel>();
    protected bool IsLoading = true;

    protected async override Task OnInitializedAsync()
    {
        await GetSubscriptionsModel();
        IsLoading = false;
    }

    protected virtual async Task GetSubscriptionsModel()
    {
        var result = await SubscriptionUIService.GetSubscriptions(CurrentUser.GetUserId());

        if (result.IsSuccess)
        {
            SubscriptionsModel = result.Value;
            StateHasChanged();
        }
        else
        {
            result.ShowErrorToast(ToastService);
        }
    }
}
