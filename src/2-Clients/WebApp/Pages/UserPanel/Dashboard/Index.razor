@using CodeBlock.DevKit.Clients.WebApp.Pages.UserPanel.Shared
@using HeyItIsMe.Application.Dtos.PageVisits
@using HeyItIsMe.WebApp.Pages.UserPanel.Dashboard.Components
@layout UserPanelLayout
@inherits CodeBlock.DevKit.Clients.WebApp.Pages.UserPanel.Dashboard.Index
@attribute [ReplaceBaseComponent]

<PageTitle>@WebAppClientLocalizer[WebAppClientResource.Nav_Menu_Dashboard]</PageTitle>

<div class="page-title-section">
    <h1 class="page-title">@WebAppClientLocalizer[WebAppClientResource.Overview]</h1>
</div>

<div class="subscriptions-section">
    <SubscriptionOverview @ref="SubscriptionOverviewComponent" />
</div>

@if (SubscriptionOverviewComponent?.Page != null)
{
    <div class="analytics-section mt-2">
        <div class="analytics-header">
            <h2 class="analytics-title">
                @WebAppLocalizer[WebAppResource.Page_Analytics]
            </h2>
        </div>

        <div class="statistics-overview mb-5">
            <PageVisitStatistics @ref="PageVisitStatisticsComponent" Page="SubscriptionOverviewComponent?.Page" />
        </div>

        <div class="mt-3" id="filterForm">
            <div class="time-controls">
                <SearchPageVisitsByDay SearchChangedCallback="OnSearchChanged" />
            </div>
        </div>

        <div class="chart-container mt-2">
            <PageVisitsByDay @ref="PageVisitsByDayComponent" SearchInputDto="SearchPageVisitsByDayInputDto" />
        </div>
    </div>

}

@code{
    protected PageVisitsByDay PageVisitsByDayComponent;
    protected SubscriptionOverview SubscriptionOverviewComponent;
    protected PageVisitStatistics PageVisitStatisticsComponent;
    protected SearchPageVisitsByDayInputDto SearchPageVisitsByDayInputDto = new();
    protected bool UserHasAnyPage = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SubscriptionOverviewComponent != null)
        {
            // Wait a bit for SubscriptionOverview to load, then update PageId
            await Task.Delay(100);
            await UpdatePageIdFromSubscription();
            await RefreshStatistics();
        }
    }

    protected virtual async Task UpdatePageIdFromSubscription()
    {
        if (SubscriptionOverviewComponent?.Page != null)
        {
            SearchPageVisitsByDayInputDto.PageId = SubscriptionOverviewComponent.Page.Id;
            if (PageVisitsByDayComponent != null)
            {
                await PageVisitsByDayComponent.OnSearchChanged(SearchPageVisitsByDayInputDto);
            }
        }
    }

    protected virtual async Task OnSearchChanged(SearchPageVisitsByDayInputDto searchInputDto)
    {
        SearchPageVisitsByDayInputDto = searchInputDto;
        if (PageVisitsByDayComponent != null)
        {
            await PageVisitsByDayComponent.OnSearchChanged(searchInputDto);
        }
    }

    protected virtual async Task RefreshStatistics()
    {
        if (PageVisitStatisticsComponent != null)
        {
            await PageVisitStatisticsComponent.RefreshStatistics();
        }
    }
}