<div class="wizard-step">
    <div class="text-center mb-4">
        <i class="bi bi-person-lines-fill text-primary" style="font-size: 2.5rem;"></i>
        <h3 class="mt-3 mb-3">Add Your Contacts</h3>
        <p class="text-muted">Let people know how to reach you</p>
    </div>
    
    <div class="form-group mb-4">
        <label class="form-label fw-bold">Contact Links</label>
        <div class="contacts-list">
            @for (int i = 0; i < Contacts.Count; i++)
            {
                var index = i;
                <div class="contact-item mb-3">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="Contacts[index]" placeholder="https://linkedin.com/in/yourname" />
                        @if (Contacts.Count > 1)
                        {
                            <button class="btn btn-outline-danger" type="button" @onclick="() => RemoveContact(index)">
                                <i class="bi bi-trash"></i>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
        
        <button class="btn btn-outline-primary btn-sm" @onclick="AddContact">
            <i class="bi bi-plus-lg me-1"></i>Add Another Contact
        </button>
        
        <div class="form-text">
            <i class="bi bi-info-circle me-1"></i>
            Add links to your social media, website, email, or any other way people can contact you.
        </div>
    </div>
    
    <div class="d-flex justify-content-between">
        <button class="btn btn-outline-secondary" @onclick="OnPrevious">
            <i class="bi bi-arrow-left me-2"></i>Back
        </button>
        <button class="btn btn-primary" @onclick="HandleSaveContacts" disabled="@(IsLoading)">
            @if (IsLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            else
            {
                <i class="bi bi-check-lg me-2"></i>
            }
            Continue
        </button>
    </div>
</div>

@using HeyItIsMe.Application.Services.Contacts
@using HeyItIsMe.Application.Dtos.Contacts
@inject IContactService ContactService
@inject IJSRuntime JSRuntime

@code {
    [Parameter] public string PageId { get; set; }
    [Parameter] public EventCallback OnPrevious { get; set; }
    [Parameter] public EventCallback OnNext { get; set; }
    
    private List<string> Contacts = new List<string> { "" };
    private bool IsLoading = false;
    
    private void AddContact()
    {
        Contacts.Add("");
    }
    
    private void RemoveContact(int index)
    {
        if (Contacts.Count > 1)
        {
            Contacts.RemoveAt(index);
        }
    }
    
    private async Task HandleSaveContacts()
    {
        if (string.IsNullOrWhiteSpace(PageId))
            return;
            
        IsLoading = true;
        try
        {
            var validContacts = Contacts.Where(c => !string.IsNullOrWhiteSpace(c)).ToList();
            
            foreach (var contact in validContacts)
            {
                var result = await ContactService.AddContact(new AddContactDto 
                { 
                    PageId = PageId, 
                    Content = contact 
                });
                
                if (!result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error adding contact: " + string.Join(", ", result.Errors));
                    return;
                }
            }
            
            await OnNext.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
