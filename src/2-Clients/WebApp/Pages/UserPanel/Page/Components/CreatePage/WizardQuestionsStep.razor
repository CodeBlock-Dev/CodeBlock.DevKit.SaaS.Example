<div class="wizard-step">
    <div class="text-center mb-4">
        <i class="bi bi-question-circle text-primary" style="font-size: 2.5rem;"></i>
        <h3 class="mt-3 mb-3">Answer Questions</h3>
        <p class="text-muted">Help us create amazing facts about you</p>
    </div>
    
    @if (Questions != null && Questions.Any())
    {
        <div class="question-progress mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <span class="text-muted">Question @(CurrentQuestionIndex + 1) of @Questions.Count()</span>
                <span class="text-muted">@(Math.Round((double)(CurrentQuestionIndex + 1) / Questions.Count() * 100))% Complete</span>
            </div>
            <div class="progress mt-2">
                <div class="progress-bar" role="progressbar" style="width: @(Math.Round((double)(CurrentQuestionIndex + 1) / Questions.Count() * 100))%"></div>
            </div>
        </div>
        
        @if (CurrentQuestion != null)
        {
            <div class="question-card mb-4">
                <h5 class="question-title">@CurrentQuestion.Content</h5>
                @if (!string.IsNullOrEmpty(CurrentQuestion.Description))
                {
                    <p class="question-description text-muted">@CurrentQuestion.Description</p>
                }
                
                <div class="form-group">
                    <textarea class="form-control" rows="4" @bind="CurrentAnswer" 
                              placeholder="Share your thoughts..."></textarea>
                </div>
            </div>
        }
        
        <div class="d-flex justify-content-between">
            <button class="btn btn-outline-secondary" @onclick="OnPrevious" disabled="@(CurrentQuestionIndex == 0)">
                <i class="bi bi-arrow-left me-2"></i>Back
            </button>
            
            @if (CurrentQuestionIndex < Questions.Count() - 1)
            {
                <button class="btn btn-primary" @onclick="HandleNextQuestion" disabled="@(string.IsNullOrWhiteSpace(CurrentAnswer) || IsLoading)">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    else
                    {
                        <i class="bi bi-arrow-right me-2"></i>
                    }
                    Next Question
                </button>
            }
            else
            {
                <button class="btn btn-success" @onclick="HandleComplete" disabled="@(string.IsNullOrWhiteSpace(CurrentAnswer) || IsLoading)">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    else
                    {
                        <i class="bi bi-check-lg me-2"></i>
                    }
                    Complete
                </button>
            }
        </div>
    }
    else if (IsLoadingQuestions)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading questions...</span>
            </div>
            <p class="mt-3 text-muted">Loading questions...</p>
        </div>
    }
</div>

@using HeyItIsMe.Application.Dtos.Questions
@using HeyItIsMe.Application.Services.Questions
@using HeyItIsMe.Application.Services.Facts
@inject IQuestionService QuestionService
@inject IFactService FactService
@inject IJSRuntime JSRuntime

@code {
    [Parameter] public string PageId { get; set; }
    [Parameter] public EventCallback OnPrevious { get; set; }
    [Parameter] public EventCallback OnComplete { get; set; }
    
    private IEnumerable<GetQuestionDto> Questions;
    private int CurrentQuestionIndex = 0;
    private string CurrentAnswer = "";
    private bool IsLoading = false;
    private bool IsLoadingQuestions = false;
    
    private GetQuestionDto CurrentQuestion => Questions?.ElementAtOrDefault(CurrentQuestionIndex);
    
    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
    }
    
    private async Task LoadQuestions()
    {
        IsLoadingQuestions = true;
        try
        {
            var result = await QuestionService.GetOrderedQuestions();
            if (result.IsSuccess)
            {
                Questions = result.Value;
                CurrentQuestionIndex = 0;
                CurrentAnswer = "";
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error loading questions: " + string.Join(", ", result.Errors));
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error: " + ex.Message);
        }
        finally
        {
            IsLoadingQuestions = false;
        }
    }
    
    private async Task HandleNextQuestion()
    {
        if (CurrentQuestion == null || string.IsNullOrWhiteSpace(CurrentAnswer))
            return;
            
        await GenerateFactForCurrentQuestion();
        
        CurrentQuestionIndex++;
        CurrentAnswer = "";
    }
    
    private async Task HandleComplete()
    {
        if (CurrentQuestion == null || string.IsNullOrWhiteSpace(CurrentAnswer))
            return;
            
        await GenerateFactForCurrentQuestion();
        await OnComplete.InvokeAsync();
    }
    
    private async Task GenerateFactForCurrentQuestion()
    {
        if (CurrentQuestion == null || string.IsNullOrWhiteSpace(CurrentAnswer) || string.IsNullOrWhiteSpace(PageId))
            return;
            
        IsLoading = true;
        try
        {
            var result = await FactService.GenerateFact(PageId, CurrentQuestion.Content, CurrentAnswer);
            if (!result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error generating fact: " + string.Join(", ", result.Errors));
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
