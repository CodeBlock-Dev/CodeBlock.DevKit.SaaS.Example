<div class="wizard-step">
    <div class="text-center mb-4">
        <i class="bi bi-image text-primary" style="font-size: 2.5rem;"></i>
        <h3 class="mt-3 mb-3">Add a Reference Image</h3>
        <p class="text-muted">This helps AI generate personalized images for your facts</p>
    </div>
    
    <div class="form-group mb-4">
        <label class="form-label fw-bold">Reference Image</label>
        <InputFile OnChange="@OnReferenceFileSelected" accept="image/*" class="form-control" />
        @if (ReferencePreview != null)
        {
            <div class="mt-3">
                <img src="@ReferencePreview" alt="Reference preview" style="max-width: 200px; max-height: 200px; border-radius: 8px;" />
            </div>
        }
        <div class="form-text">
            <i class="bi bi-info-circle me-1"></i>
            This image helps our AI understand your style and generate better images for your facts.
        </div>
        <div class="mt-2">
            <small class="text-muted">Debug: ReferenceBase64 is @(ReferenceBase64 == null ? "null" : $"set ({ReferenceBase64.Length} chars)")</small>
        </div>
    </div>
    
    <div class="d-flex justify-content-between">
        <button class="btn btn-outline-secondary" @onclick="OnPrevious">
            <i class="bi bi-arrow-left me-2"></i>Back
        </button>
        <button class="btn btn-primary" @onclick="HandleUpdateReferenceImage" disabled="@(ReferenceBase64 == null || IsLoading)">
            @if (IsLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            else
            {
                <i class="bi bi-check-lg me-2"></i>
            }
            Continue
        </button>
    </div>
</div>

@using HeyItIsMe.Application.Services.Pages
@inject IPageService PageService
@inject IJSRuntime JSRuntime

@code {
    [Parameter] public string PageId { get; set; }
    [Parameter] public EventCallback OnPrevious { get; set; }
    [Parameter] public EventCallback OnNext { get; set; }
    
    private string ReferenceBase64;
    private string ReferencePreview;
    private bool IsLoading = false;
    
    private async Task OnReferenceFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            Console.WriteLine("OnReferenceFileSelected called");
            
            var file = e.File;
            if (file != null)
            {
                // Validate file size (max 10MB)
                if (file.Size > 10 * 1024 * 1024)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "File size must be less than 10MB.");
                    return;
                }

                // Validate file type
                if (!file.ContentType.StartsWith("image/"))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Please select an image file.");
                    return;
                }

                // Convert to base64
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var imageBytes = memoryStream.ToArray();
                ReferenceBase64 = Convert.ToBase64String(imageBytes);
                
                // Create data URL for preview
                ReferencePreview = $"data:{file.ContentType};base64,{ReferenceBase64}";
                
                Console.WriteLine($"File processed successfully: {ReferenceBase64.Length} chars");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing file: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error uploading file: {ex.Message}");
        }
    }
    
    
    private async Task HandleUpdateReferenceImage()
    {
        if (ReferenceBase64 == null || string.IsNullOrWhiteSpace(PageId))
            return;
            
        IsLoading = true;
        try
        {
            var result = await PageService.UpdatePageReferenceImage(PageId, ReferenceBase64);
            if (result.IsSuccess)
            {
                await OnNext.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error updating reference image: " + string.Join(", ", result.Errors));
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
